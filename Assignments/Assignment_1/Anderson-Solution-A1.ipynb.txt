{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A1: Three-Layer Neural Network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "by *Chuck Anderson*, Instructor\n",
    "\n",
    "This notebook includes my solution, and several discussions by students about the difficulties they faced and what parts were easy.  Thanks, everyone, for the discussion parts. Please take the time to read these comments from your colleagues. These are valuable feedback to me.\n",
    "\n",
    "In the Extra Credit section, I have pasted cells from Sean Kouma.  Thanks, Shean."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Table of Contents<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Requirements\" data-toc-modified-id=\"Requirements-1\">Requirements</a></span></li><li><span><a href=\"#Example-Results\" data-toc-modified-id=\"Example-Results-2\">Example Results</a></span></li><li><span><a href=\"#Discussion\" data-toc-modified-id=\"Discussion-3\">Discussion</a></span></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Requirements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this assignment, you will start with code from lecture notes 04 and add code to do the following. You will implement and apply a neural network as in lecture notes 04 but now with an additional hidden layer.  The resulting three-layer network will consist of three weight matrices, `U`, `V` and `W`.\n",
    "\n",
    "First, implement the forward pass to calculate outputs of each layer:\n",
    "\n",
    "* Define functions `add_ones` and `rmse` by copying it from the lecture notes.\n",
    "* Define function `forward_layer1` with two arguments, the input `X` and the first layer's weights `U`. It calculates and returns the output, `Zu`, of the first layer, using the `tanh` activation function.\n",
    "* Define function `forward_layer2` with two arguments, the input `Zu` and the second layer's weights `V`. It calculates and returns the output, `Zv`, of the second layer, using the `tanh` activation function.\n",
    "* Define function `forward_layer3` with two arguments, the input `Zv` and the third layer's weights `W`. It calculates and returns the output, `Y`, of the third layer as just the weighted sum of the inputs, without an activation function.\n",
    "* Define function `forward` with four arguments, the input `X` to the network and the weight matrices, `U`, `V` and `W` of the three layers. It calls the above three functions and returns the outputs of all layers, `Zu`, `Zv`, `Y`.\n",
    "\n",
    "Now implement the backward pass that calculates `delta` values for each layer:\n",
    "\n",
    "* Define function `backward_layer3` that accepts as arguments the target values `T` and the predicted values `Y` calculated by function `forward`. It calculates and returns `delta_layer3` for layer 3, which is just `T - Y`.\n",
    "* Define function `backward_layer2` that accepts as arguments `delta_layer3`, `W` and `Zv` and calculates and returns `delta` for layer 2 by back-propagating `delta_layer3` through `W`.\n",
    "* Define function `backward_layer1` that accepts as arguments `delta_layer2`, `V` and `ZU` and calculates and returns `delta` for layer 1 by back-propagating `delta_layer2` through `V`.\n",
    "* Define function `gradients` that accepts as arguments `X`, `T`, `Zu`, `Zv`, `Y`, `U`, `V`, and `W`, and calls the above three functions and uses the results to calculate the gradient of the mean squared error between `T` and `Y` with respect to `U`, `V` and `W` and returns those three gradients.\n",
    "\n",
    "Now you can use `forward` and `gradients` to define the function `train` to train a three-layer neural network.\n",
    "          \n",
    "* Define function `train` that returns the resulting values of `U`, `V`, and `W` and the `X` and `T` standardization parameters.  Arguments are unstandardized `X` and `T`, the number of units in each of the two hidden layers, the number of epochs and the learning rate. This function standardizes `X` and `T`, initializes `U`, `V` and `W` to uniformly distributed random values between -0.1 and 0.1, and updates `U`, `V` and `W` by the learning rate times their gradients for `n_epochs` times as shown in lecture notes 04.  This function must call `forward`, `gradients` and `add_ones`.  It must also collect in a list called `rmse_trace` the root-mean-square errors for each epoch between `T` and `Y`.\n",
    "\n",
    "      def train(X, T, n_units_U, n_units_V, n_epochs, rho):\n",
    "          .\n",
    "          .\n",
    "          .\n",
    "          return rmse_trace, U, V, W, X_means, X_stds, T_means, T_stds\n",
    "\n",
    "Then we need a function `use` that calculates an output `Y` for new samples.  \n",
    "\n",
    "* Define function `use` that accepts unstandardized `X`, standardization parameters, and weight matrices `U`, `V`, and `W` and returns the unstandardized output.\n",
    "\n",
    "      def use(X, X_means, X_stds, T_means, T_stds, U, V, W):\n",
    "          .\n",
    "          .\n",
    "          .\n",
    "          Y = ....\n",
    "          return Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:09.183896Z",
     "start_time": "2022-09-28T17:23:09.169527Z"
    }
   },
   "outputs": [],
   "source": [
    "def rmse(Y, T, T_stds):\n",
    "    return np.sqrt(np.mean((((T - Y) * T_stds)**2)))\n",
    "\n",
    "def add_ones(X):\n",
    "    return np.insert(X, 0, 1, axis=1)\n",
    "\n",
    "def forward_layer1(X, U):\n",
    "    return np.tanh(add_ones(X) @ U)\n",
    "\n",
    "def forward_layer2(Zu, V):\n",
    "    return np.tanh(add_ones(Zu) @ V)\n",
    "\n",
    "def forward_layer3(Zv, W):\n",
    "    return add_ones(Zv) @ W\n",
    "\n",
    "def forward(X, U, V, W):\n",
    "    Zu = forward_layer1(X, U)\n",
    "    Zv = forward_layer2(Zu, V)\n",
    "    Y = forward_layer3(Zv, W)\n",
    "    return Zu, Zv, Y\n",
    "\n",
    "def backward_layer3(T, Y):\n",
    "    return T - Y\n",
    "\n",
    "def backward_layer2(delta_layer3, W, Zv):\n",
    "    return delta_layer3 @ W[1:, :].T * (1 - Zv**2)\n",
    "\n",
    "def backward_layer1(delta_layer2, V, Zu):\n",
    "    return delta_layer2 @ V[1:, :].T * (1 - Zu**2)\n",
    "\n",
    "def gradients(X, T, Zu, Zv, Y, U, V, W):\n",
    "    delta3 = backward_layer3(T, Y)\n",
    "    delta2 = backward_layer2(delta3, W, Zv)\n",
    "    delta1 = backward_layer1(delta2, V, Zu)\n",
    "    \n",
    "    grad_W = - add_ones(Zv).T @ delta3\n",
    "    grad_V = - add_ones(Zu).T @ delta2\n",
    "    grad_U = - add_ones(X).T @ delta1\n",
    "    return grad_U, grad_V, grad_W\n",
    "\n",
    "def train(X, T, n_units_U, n_units_V, n_epochs, rho):\n",
    "\n",
    "    n_samples, n_inputs = X.shape\n",
    "    _, n_outputs = T.shape\n",
    "\n",
    "    rho = rho / (n_samples * n_outputs)\n",
    "    \n",
    "    X_means = np.mean(X, axis=0)\n",
    "    X_stds = np.std(X, axis=0)\n",
    "    # X_stds[X_stds == 0] = 1\n",
    "    T_means = np.mean(T, axis=0)\n",
    "    T_stds = np.std(T, axis=0)\n",
    "\n",
    "    X = (X - X_means) / X_stds\n",
    "    T = (T - T_means) / T_stds\n",
    "\n",
    "    U = np.random.uniform(-1, 1, size=(1 + n_inputs, n_units_U)) / np.sqrt(1 + n_inputs)\n",
    "    V = np.random.uniform(-1, 1, size=(1 + n_units_U, n_units_V)) / np.sqrt(1 + n_units_U)\n",
    "    W = np.random.uniform(-1, 1, size=(1 + n_units_V, n_outputs)) / np.sqrt(1 + n_units_V)\n",
    "\n",
    "    rmse_trace = []\n",
    "    for epoch in range(n_epochs):\n",
    "\n",
    "        Zu, Zv, Y = forward(X, U, V, W)\n",
    "        rmse_trace.append(rmse(Y, T, T_stds))\n",
    "\n",
    "        gU, gV, gW = gradients(X, T, Zu, Zv, Y, U, V, W)\n",
    "\n",
    "        U = U - rho * gU\n",
    "        V = V - rho * gV\n",
    "        W = W - rho * gW\n",
    "\n",
    "    return rmse_trace, U, V, W, X_means, X_stds, T_means, T_stds\n",
    "\n",
    "\n",
    "def use(X, X_means, X_stds, T_means, T_stds, U, V, W):\n",
    "    # standardize X\n",
    "    X = (X - X_means) / X_stds\n",
    "    # Forward pass\n",
    "    _, _, Y = forward(X, U, V, W)\n",
    "    # Unstandardize output\n",
    "    Y = Y * T_stds + T_means\n",
    "    return Y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:17.538366Z",
     "start_time": "2022-09-28T17:23:16.678362Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Add code cells here to define the functions above.  Once these are correctly defined, the following cells should run and produce the same results as those here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:18.404833Z",
     "start_time": "2022-09-28T17:23:18.398370Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((4, 1), (4, 1), (4, 1), (4, 1))"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Xtrain = np.arange(4).reshape(-1, 1)\n",
    "Ttrain = Xtrain ** 2\n",
    "\n",
    "Xtest = Xtrain + 0.5\n",
    "Ttest = Xtest ** 2\n",
    "\n",
    "Xtrain.shape, Ttrain.shape, Xtest.shape, Ttest.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:21.123258Z",
     "start_time": "2022-09-28T17:23:21.118215Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2, 3), (4, 2), (3, 1))"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "U = np.array([[1, 2, 3], [4, 5, 6]])  # 2 x 3 matrix, for 2 inputs (include constant 1) and 3 units\n",
    "V = np.array([[-1, 3], [1, 3], [-2, 1], [2, -4]]) # 2 x 3 matrix, for 3 inputs (include constant 1) and 2 units\n",
    "W = np.array([[-1], [2], [3]])  # 3 x 1 matrix, for 3 inputs (include constant 1) and 1 output unit\n",
    "U.shape, V.shape, W.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:23.203734Z",
     "start_time": "2022-09-28T17:23:23.198903Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.34164079],\n",
       "       [-0.4472136 ],\n",
       "       [ 0.4472136 ],\n",
       "       [ 1.34164079]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_means = np.mean(Xtrain, axis=0)\n",
    "X_stds = np.std(Xtrain, axis=0)\n",
    "Xtrain_st = (Xtrain - X_means) / X_stds\n",
    "Xtrain_st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:25.923494Z",
     "start_time": "2022-09-28T17:23:25.918621Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.        ],\n",
       "       [-0.71428571],\n",
       "       [ 0.14285714],\n",
       "       [ 1.57142857]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T_means = np.mean(Ttrain, axis=0)\n",
    "T_stds = np.std(Ttrain, axis=0)\n",
    "Ttrain_st = (Ttrain - T_means) / T_stds\n",
    "Ttrain_st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:28.794753Z",
     "start_time": "2022-09-28T17:23:28.758494Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.99967774, -0.99983726, -0.99991782],\n",
       "       [-0.65775956, -0.23177837,  0.3065367 ],\n",
       "       [ 0.99246605,  0.99958165,  0.99997685],\n",
       "       [ 0.9999941 ,  0.99999995,  1.        ]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Zu = forward_layer1(Xtrain_st, U)\n",
    "Zu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:31.074758Z",
     "start_time": "2022-09-28T17:23:31.070450Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-9.64016194e-01,  9.95062648e-01],\n",
       "       [-5.23485834e-01, -4.06326878e-01],\n",
       "       [-6.74345774e-03,  9.94823310e-01],\n",
       "       [-5.79521329e-06,  9.95054578e-01]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Zv = forward_layer2(Zu, V)\n",
    "Zv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:32.323438Z",
     "start_time": "2022-09-28T17:23:32.318932Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.05715556],\n",
       "       [-3.2659523 ],\n",
       "       [ 1.97098301],\n",
       "       [ 1.98515214]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = forward_layer3(Zv, W)\n",
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:35.251623Z",
     "start_time": "2022-09-28T17:23:35.246461Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Zu=array([[-0.99967774, -0.99983726, -0.99991782],\n",
      "       [-0.65775956, -0.23177837,  0.3065367 ],\n",
      "       [ 0.99246605,  0.99958165,  0.99997685],\n",
      "       [ 0.9999941 ,  0.99999995,  1.        ]])\n",
      "Zv=array([[-9.64016194e-01,  9.95062648e-01],\n",
      "       [-5.23485834e-01, -4.06326878e-01],\n",
      "       [-6.74345774e-03,  9.94823310e-01],\n",
      "       [-5.79521329e-06,  9.95054578e-01]])\n",
      "Y=array([[ 0.05715556],\n",
      "       [-3.2659523 ],\n",
      "       [ 1.97098301],\n",
      "       [ 1.98515214]])\n"
     ]
    }
   ],
   "source": [
    "Zu, Zv, Y = forward(Xtrain_st, U, V, W)\n",
    "print(f'{Zu=}')\n",
    "print(f'{Zv=}')\n",
    "print(f'{Y=}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:38.338359Z",
     "start_time": "2022-09-28T17:23:38.334049Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.05715556],\n",
       "       [ 2.55166659],\n",
       "       [-1.82812587],\n",
       "       [-0.41372357]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delta_layer3 = backward_layer3(Ttrain_st, Y)\n",
    "delta_layer3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:40.243354Z",
     "start_time": "2022-09-28T17:23:40.238922Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.14942424, -0.03123998],\n",
       "       [ 3.70482892,  6.39114758],\n",
       "       [-3.65608548, -0.05663488],\n",
       "       [-0.82744715, -0.01224587]])"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delta_layer2 = backward_layer2(delta_layer3, W, Zv)\n",
    "delta_layer2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:41.386889Z",
     "start_time": "2022-09-28T17:23:41.382529Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.56687861e-04,  8.70954047e-05, -2.85795848e-05],\n",
       "       [ 1.29800416e+01, -9.63794665e-01, -1.64490088e+01],\n",
       "       [-5.74324794e-02,  6.06940191e-03, -3.28089886e-04],\n",
       "       [-1.02032268e-05,  1.79372045e-07, -1.62184098e-09]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "delta_layer1 = backward_layer1(delta_layer2, V, Zu)\n",
    "delta_layer1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:44.359694Z",
     "start_time": "2022-09-28T17:23:44.354615Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "grad_U=array([[-12.92244218,   0.95763799,  16.44936549],\n",
      "       [  5.83033911,  -0.43361979,  -7.35611199]])\n",
      "grad_V=array([[ 0.92812794, -6.29102685],\n",
      "       [ 6.74349351,  4.24106248],\n",
      "       [ 5.19130234,  1.51895191],\n",
      "       [ 3.19836999, -1.92147926]])\n",
      "grad_W=array([[0.74733841],\n",
      "       [0.30431595],\n",
      "       [4.31908649]])\n"
     ]
    }
   ],
   "source": [
    "grad_U, grad_V, grad_W = gradients(Xtrain_st, Ttrain_st, Zu, Zv, Y, U, V, W)\n",
    "print(f'{grad_U=}')\n",
    "print(f'{grad_V=}')\n",
    "print(f'{grad_W=}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:46.295536Z",
     "start_time": "2022-09-28T17:23:46.290257Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3.70004445],\n",
       "       [-7.93083306],\n",
       "       [10.39844055],\n",
       "       [10.44803251]])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = use(Xtrain, X_means, X_stds, T_means, T_stds, U, V, W)\n",
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:49.513278Z",
     "start_time": "2022-09-28T17:23:49.330403Z"
    }
   },
   "outputs": [],
   "source": [
    "rmse_trace, U, V, W, X_means, X_stds, T_means, T_stds = train(Xtrain, Ttrain, 10, 10, 1000, 0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:52.827560Z",
     "start_time": "2022-09-28T17:23:52.822521Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.00000000e+00, -7.43436812e-03],\n",
       "       [ 1.00000000e+00,  9.93471010e-01],\n",
       "       [ 4.00000000e+00,  4.02264621e+00],\n",
       "       [ 9.00000000e+00,  8.98524158e+00]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y = use(Xtrain, X_means, X_stds, T_means, T_stds, U, V, W)\n",
    "np.hstack((Ttrain, Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:54.809919Z",
     "start_time": "2022-09-28T17:23:54.686461Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'RMSE')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(rmse_trace)\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('RMSE')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is another example with a little more interesting data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:58.667152Z",
     "start_time": "2022-09-28T17:23:58.662612Z"
    }
   },
   "outputs": [],
   "source": [
    "n = 30\n",
    "Xtrain = np.linspace(0., 20.0, n).reshape((n, 1)) - 10\n",
    "Ttrain = 0.2 + 0.05 * (Xtrain + 10) + 0.4 * np.sin(Xtrain + 10) + 0.2 * np.random.normal(size=(n, 1))\n",
    "\n",
    "Xtest = Xtrain + 0.1 * np.random.normal(size=(n, 1))\n",
    "Ttest = 0.2 + 0.05 * (Xtest + 10) + 0.4 * np.sin(Xtest + 10) + 0.2 * np.random.normal(size=(n, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:23:59.728150Z",
     "start_time": "2022-09-28T17:23:59.702428Z"
    }
   },
   "outputs": [],
   "source": [
    "rmse_trace, U, V, W, X_means, X_stds, T_means, T_stds = train(Xtrain, Ttrain, 5, 5, 100, 0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:24:00.379560Z",
     "start_time": "2022-09-28T17:24:00.286552Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'RMSE')"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(rmse_trace)\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('RMSE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:24:01.737802Z",
     "start_time": "2022-09-28T17:24:01.734621Z"
    }
   },
   "outputs": [],
   "source": [
    "Y = use(Xtrain, X_means, X_stds, T_means, T_stds, U, V, W)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:24:02.473344Z",
     "start_time": "2022-09-28T17:24:02.326358Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(Xtrain, Ttrain)\n",
    "plt.plot(Xtrain, Y);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:24:06.220421Z",
     "start_time": "2022-09-28T17:24:04.174852Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rmse_trace, U, V, W, X_means, X_stds, T_means, T_stds = train(Xtrain, Ttrain, 10, 5, 10000, 0.1)\n",
    "Y = use(Xtrain, X_means, X_stds, T_means, T_stds, U, V, W)\n",
    "\n",
    "plt.figure(figsize=(10, 4))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(rmse_trace)\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('RMSE')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.plot(Xtrain, Ttrain, label='Train')\n",
    "plt.plot(Xtrain, Y, label='Test')\n",
    "plt.xlabel('Input')\n",
    "plt.ylabel('Target and Output')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Your plots will probably differ from these results, because you start with different random weight values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Discussion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here I am including examples from several students' notebooks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "My first difficulty was simply understanding what I am required to do, what is the meaning of each function. It is great that each function description has input and output expectations. It helped! Lecture 04 notes were also helpful.\n",
    "\n",
    "Also I can emphasize the following specific assignment parts, that were hard for me:\n",
    "* I spent several hours figuring out the dimesions to make it work. That is probably one of the hardest parts of the assignment. \n",
    "* Another hard part is understanding the meaning behind all of the mathematical formulas.\n",
    "* I did not fully understand the concept of standartized values, so it took time to figure that out.\n",
    "* I was confused with part of the `train` function requirements. The description states that it should return the resulting values of U, V, and W and the X and T standardization parameters, and later it states that it also must collect in a list called rmses the root-mean-square errors for each epoch between T and Y. I was not sure whether I need to return `rmses` or not. But when I took a look at `Examples` I saw that indeed I need to return `rmses` list."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Difficulties encountered:\n",
    "\n",
    " 1. Faced dimension compatibility issues with matrix mutiplications in train().\n",
    "  \n",
    " 2. Had difficulty in solving the \"TypeError: 'list' object is not callable\" error which was due to rmse function and rmse list having the same name so it was trying to refer to rmse list and not the rmse function when the rmse function was called by the  code.\n",
    " \n",
    " 3. Spent some time understanding the backward layer function computation.\n",
    " \n",
    " 4. The calculation of U, V, W in the train function was also a bit tricky and hard.\n",
    " \n",
    "Easy Parts : \n",
    "\n",
    "  1. Forward layer function computation was easy.\n",
    "  \n",
    "  2. Use function definition was easy.\n",
    "\n",
    "Hard Parts:\n",
    "\n",
    "  1. Train function was bit tricky and hard .\n",
    "  \n",
    "  2. Gradient function was also bit tough. The video links posted in the discussion was helpful in solving the gradient function."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This assignment was quite challenging since I don't fully understand how neural network layers work together mathematically.  I watched the lectures multiple times over and continued to refer to the notes and even did some outside research, but my output never seemed to match the example output.  I struggled with knowing that my output was incorrect and not knowing how to fix it.  Surprisingly I felt very comfortable with the forward and gradient functions on their own when they were separate from the train or use function.  I believe this was because it was slightly mathematical but nothing too intense.  Overall I did struggle with this assignment but I have learned a lot in finishing it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Overall, I would say this assignment started out pretty easy, then grew progressively harder for me. This was mostly due to a few errors made on my part.\n",
    "\n",
    "From an ease standpoint, the concept of the forward pass, backward pass, rmse, weights, biases and why we use each of these things made complete sense to me. Filling out these initial functions wasn't much trouble.\n",
    "    \n",
    "Towards the end of the assignment, however, I really struggled. At first, I forgot to call my add_ones function inside the gradients function which for a while threw many of my matrix shapes off. Once I got to the root of that problem and solved it, the train function was my next and biggest difficulty. \n",
    "\n",
    "Specifically, I faced a lot of confusion over the initilization of U, V and W. I was getting numbers for these variables and my shapes were matching up okay, but I kept wondering if the uniform distribution assignment code and weight update code I had come up with was correct.\n",
    "\n",
    "This is because when these values were later being used to compute values for Y and for RMSE plotting purposes, things seemed off. After some trial and error, I soon found that my issues were two-fold. First, when the grader was run, my matrix dimensions for the supplied version of test code were off. To account for this I switched up what was being used to compute \"size\" for U, V and W. That problem was then quickly solved. (Originally I thought maybe I had to reshape something to account for all matrix sizes but it turns out I was just overthinking things. I just had to simply use X.shape[1] + 1)\n",
    "\n",
    "My next issue was a crazy big Y/set of RMSE values. It turns out the issues I was having here was due to a bug on my part - when calling my gradients function, I passed in the wrong version of T. After discovering this and switching my input to the correct variable, this problem was then quickly solved too. (If you're reading this, thanks again Dr. Anderson for helping me get to the bottom of this!)\n",
    "\n",
    "Overall I really enjoyed this assignment and felt like I walked away with a strong understanding of what was going on. The debugging did take me a while but it helped me to better understand what was happening during each step of this assignment and how all the different pieces connected, which I think will be great for my overall understanding of things as we move forward in class! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Grading\n",
    "\n",
    "Your notebook will be run and graded automatically. Test this grading process by first downloading [A1grader.tar](http://www.cs.colostate.edu/~anderson/cs545/notebooks/A1grader.tar) <font color=\"red\">(updated August 28th)</font> and extract `A1grader.py` from it. Run the code in the following cell to demonstrate an example grading session.  The remaining 10 points will be based on your discussion of this assignment.\n",
    "\n",
    "A different, but similar, grading script will be used to grade your checked-in notebook. It will include additional tests. You should design and perform additional tests on all of your functions to be sure they run correctly before checking in your notebook.  A perfect execution score from this grading script does not guarantee that you will receive a perfect execution score from the final grading script.\n",
    "\n",
    "For the grading script to run correctly, you must first name this notebook as 'Lastname-A1.ipynb' with 'Lastname' being your last name, and then save this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-09-28T17:24:55.413108Z",
     "start_time": "2022-09-28T17:24:47.986277Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================= Code Execution =======================\n",
      "\n",
      "Extracting python code from notebook named 'Anderson-Solution-A1.ipynb' and storing in notebookcode.py\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[NbConvertApp] Converting notebook Anderson-Solution-A1.ipynb to script\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removing all statements that are not function or class defs or import statements.\n",
      "\n",
      "Testing\n",
      "    X = np.arange(4).reshape(-1, 1)\n",
      "    T = np.log(X + 10)\n",
      "\n",
      "    ni = 1\n",
      "    nu = 2\n",
      "    nv = 3\n",
      "    U = np.arange((ni + 1) * nu).reshape(ni + 1, nu) * 0.1\n",
      "    V = (np.arange((nu + 1) * nv).reshape(nu + 1, nv) - 6) * 0.1\n",
      "    W = np.arange(nv + 1).reshape(nv + 1, 1) * -0.1\n",
      "\n",
      "    a = forward_layer1(X, U)\n",
      "    b = forward_layer2(a, V)\n",
      "    c = forward_layer3(b, W)\n",
      "\n",
      "    Zu, Zv, Y = forward(X, U, V, W)\n",
      "\n",
      "\n",
      "--- 20/20 points. a, b, c, Zu, Zv and Y are correct.\n",
      "\n",
      "Testing\n",
      "    X = np.arange(4).reshape(-1, 1)\n",
      "    T = np.log(X + 10)\n",
      "\n",
      "    ni = 1\n",
      "    nu = 2\n",
      "    nv = 3\n",
      "    U = np.arange((ni + 1) * nu).reshape(ni + 1, nu) * 0.1\n",
      "    V = (np.arange((nu + 1) * nv).reshape(nu + 1, nv) - 6) * 0.1\n",
      "    W = np.arange(nv + 1).reshape(nv + 1, 1) * -0.1\n",
      "\n",
      "    Zu = np.array([[0.        , 0.09966799],\n",
      "                   [0.19737532, 0.37994896],\n",
      "                   [0.37994896, 0.60436778],\n",
      "                   [0.53704957, 0.76159416]])\n",
      "    Zv = np.array([[-0.53704957, -0.45424278, -0.36276513],\n",
      "                   [-0.57783916, -0.46328044, -0.3308191 ],\n",
      "                   [-0.61316945, -0.47426053, -0.30690171],\n",
      "                   [-0.64173317, -0.4863364 , -0.29258059]])\n",
      "    Y = np.array([[0.25338305],\n",
      "                  [0.24968573],\n",
      "                  [0.24823956],\n",
      "                  [0.24921478]])\n",
      "\n",
      "    d3 = backward_layer3(T, Y)\n",
      "    d2 = backward_layer2(d3, W, Zv)\n",
      "    d1 = backward_layer1(d2, V, Zu)\n",
      "\n",
      "  \n",
      "    grad_wrt_U, grad_wrt_V, grad_wrt_W = gradients(X, T, Zu, Zv, Y, U, V, W)\n",
      "\n",
      "\n",
      "--- 20/20 points. d1, d2, d3, grad_wrt_U, grad_wrt_V, grad_wrt_W are correct.\n",
      "\n",
      "Testing\n",
      "    X = (np.arange(40).reshape(-1, 2) - 10) * 0.1\n",
      "    T = X ** 3\n",
      "\n",
      "    rmses, U, V, W, X_means, X_stds, T_means, T_stds = train(X, T, 100, 50, 10000, 0.005)\n",
      "\n",
      "U.shape is correct\n",
      "V.shape is correct\n",
      "W.shape is correct\n",
      "X_means is correct.\n",
      "X_stds is correct.\n",
      "T_means is correct.\n",
      "T_stds is correct.\n",
      "\n",
      "--- 20/20 points. Shapes of weight matrices and standardization parameters are correct\n",
      "\n",
      "Testing\n",
      "    X = (np.arange(40).reshape(-1, 2) - 10) * 0.1\n",
      "    T = X ** 3\n",
      "\n",
      "    vs = []\n",
      "    for i in range(20):\n",
      "        rmses, U, V, W, X_means, X_stds, T_means, T_stds = train(X, T, 100, 50, 100, 0.005)\n",
      "        Y = use(X, X_means, X_stds, T_means, T_stds, U, V, W)\n",
      "        vs.append(rmse(Y, T, T_stds))\n",
      "\n",
      "    rmse_min, rmse_max = min(vs), max(vs)\n",
      "\n",
      "\n",
      "--- 30/30 points. Range of RMSE results are what is expected: 20 < RMSE < 60\n",
      "\n",
      "======================================================================\n",
      "A1 Execution Grade is 90 / 90\n",
      "======================================================================\n",
      "\n",
      " __ / 10 points Based on your discussion.\n",
      "\n",
      "======================================================================\n",
      "A1 FINAL GRADE is  _  / 100\n",
      "======================================================================\n",
      "\n",
      "Extra Credit:\n",
      "\n",
      "Apply your functions to a data set from the UCI Machine Learning Repository.\n",
      "Explain your steps and results in markdown cells.\n",
      "\n",
      "\n",
      "A1 EXTRA CREDIT is 0 / 1\n"
     ]
    }
   ],
   "source": [
    "%run -i A1grader.py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Check-In\n",
    "\n",
    "Do not include this section in your notebook.\n",
    "\n",
    "Name your notebook ```Lastname-A1.ipynb```.  So, for me it would be ```Anderson-A1.ipynb```.  Submit the file using the ```Assignment 1``` link on [Canvas](https://colostate.instructure.com/courses/151263)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Extra Credit\n",
    "\n",
    "Apply your multilayer neural network code to a regression problem using data that you choose \n",
    "from the [UCI Machine Learning Repository](http://archive.ics.uci.edu/ml/datasets.php). Pick a dataset that\n",
    "is listed as being appropriate for regression."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n",
      "                                 Dload  Upload   Total   Spent    Left  Speed\n",
      "100 32717  100 32717    0     0  86168      0 --:--:-- --:--:-- --:--:-- 86097\n"
     ]
    }
   ],
   "source": [
    "!curl --output REvaluation https://archive.ics.uci.edu/ml/machine-learning-databases/00477/Real%20estate%20valuation%20data%20set.xlsx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((414, 6), (414, 1), (331, 6), (83, 6))"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I chose the real estate validation set found here (note that the data is for Taiwan): https://archive-beta.ics.uci.edu/ml/datasets/real+estate+valuation+data+set#Descriptive \n",
    "# There are several features such as transaction date, house age, nearby convenience stores, etc. and we're trying\n",
    "# to predict the house price of unit area (similar to price per square foot)\n",
    "#\n",
    "# NOTE: pandas uses the 'openpyxl' library inside of the read_excel function which I use to read in the data.\n",
    "# This python library will need to be installed to run the code below.\n",
    "# Reference: https://sna.cs.colostate.edu/software/install-sw/\n",
    "# For myself, I did the following commands:\n",
    "# module purge\n",
    "# module load python/bundle-3.9\n",
    "# pip3.9 install openpyxl --user\n",
    "\n",
    "import pandas as pd\n",
    "data = pd.read_excel('REvaluation', sheet_name=None)\n",
    "Y = []\n",
    "df = pd.DataFrame()\n",
    "for key in data:\n",
    "    Y.append(data[key]['Y house price of unit area'])\n",
    "    df = data[key]\n",
    "T = df.iloc[:,-1]\n",
    "X = df.iloc[:,1:-1].values\n",
    "# print(X.values)\n",
    "# print(X)\n",
    "T = T.to_numpy()\n",
    "T = T.reshape(-1, 1)\n",
    "(X.shape, T.shape)\n",
    "\n",
    "split = int(X.shape[0] * 0.8)\n",
    "X_train = X[:split,:]\n",
    "X_test = X[split:, :]\n",
    "T_train = T[:split,:]\n",
    "T_test = T[split:, :]\n",
    "(X.shape, T.shape, X_train.shape, X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "73.86485623215874\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This cell takes around 30 seconds to run\n",
    "rmses, U, V, W, X_means, X_stds, T_means, T_stds = train(X_train, T_train, 10, 10, 10000, 0.1)\n",
    "Y = use(X_test, X_means, X_stds, T_means, T_stds, U, V, W)\n",
    "plt.figure(figsize=(10, 4))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(rmses)\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('RMSE')\n",
    "print(rmses[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[15.6       , 16.01200691],\n",
       "       [39.6       , 39.36375767],\n",
       "       [38.4       , 47.55309646],\n",
       "       [22.8       , 29.18220552],\n",
       "       [36.5       , 47.12080981],\n",
       "       [35.6       , 35.83813845],\n",
       "       [30.9       , 35.41612574],\n",
       "       [36.3       , 42.36029707],\n",
       "       [50.4       , 65.32815926],\n",
       "       [42.9       , 31.40405497]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the first 10 targets vs predictions\n",
    "H = np.hstack((T_test, Y))\n",
    "H[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Predicted')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# If we predicted every value perfectly, this would be a perfectly straight line with a slope of 1 and an intercept\n",
    "# of 0. Thus we can use this plot to visualize our error by looking at how far our dots are from that imaginary line\n",
    "plt.plot(T_test, Y, 'o');\n",
    "plt.xlabel('Target')\n",
    "plt.ylabel('Predicted')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "512px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
