{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b31b1404",
   "metadata": {},
   "source": [
    "$\\newcommand{\\xv}{\\mathbf{x}}\n",
    "\\newcommand{\\Xv}{\\mathbf{X}}\n",
    "\\newcommand{\\yv}{\\mathbf{y}}\n",
    "\\newcommand{\\Yv}{\\mathbf{Y}}\n",
    "\\newcommand{\\Dv}{\\mathbf{D}}\n",
    "\\newcommand{\\zv}{\\mathbf{z}}\n",
    "\\newcommand{\\av}{\\mathbf{a}}\n",
    "\\newcommand{\\Wv}{\\mathbf{W}}\n",
    "\\newcommand{\\wv}{\\mathbf{w}}\n",
    "\\newcommand{\\gv}{\\mathbf{g}}\n",
    "\\newcommand{\\Hv}{\\mathbf{H}}\n",
    "\\newcommand{\\dv}{\\mathbf{d}}\n",
    "\\newcommand{\\Vv}{\\mathbf{V}}\n",
    "\\newcommand{\\vv}{\\mathbf{v}}\n",
    "\\newcommand{\\tv}{\\mathbf{t}}\n",
    "\\newcommand{\\Tv}{\\mathbf{T}}\n",
    "\\newcommand{\\zv}{\\mathbf{z}}\n",
    "\\newcommand{\\Zv}{\\mathbf{Z}}\n",
    "\\newcommand{\\muv}{\\boldsymbol{\\mu}}\n",
    "\\newcommand{\\sigmav}{\\boldsymbol{\\sigma}}\n",
    "\\newcommand{\\phiv}{\\boldsymbol{\\phi}}\n",
    "\\newcommand{\\Phiv}{\\boldsymbol{\\Phi}}\n",
    "\\newcommand{\\Sigmav}{\\boldsymbol{\\Sigma}}\n",
    "\\newcommand{\\Lambdav}{\\boldsymbol{\\Lambda}}\n",
    "\\newcommand{\\half}{\\frac{1}{2}}\n",
    "\\newcommand{\\argmax}[1]{\\underset{#1}{\\operatorname{argmax}}}\n",
    "\\newcommand{\\argmin}[1]{\\underset{#1}{\\operatorname{argmin}}}\n",
    "\\newcommand{\\dimensionbar}[1]{\\underset{#1}{\\operatorname{|}}}\n",
    "$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffdc67e6",
   "metadata": {},
   "source": [
    "# Recurrent Neural Networks"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f486c16f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-11-09T17:57:07.283442Z",
     "start_time": "2021-11-09T17:57:07.273226Z"
    }
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "effa15e3",
   "metadata": {},
   "source": [
    "Do you remember our notes in [Lecture Notes 04](https://nbviewer.org/url/www.cs.colostate.edu/~anderson/cs545/notebooks/04%20Introduction%20to%20Neural%20Networks.ipynb) where we derived the math for back-propagation and then wrote the simple python code to implement it?  Here it is again.\n",
    "\n",
    "$$\n",
    "    \\begin{align*}\n",
    "      \\Zv &= h(\\tilde{\\Xv} \\Vv)\\\\\n",
    "      \\Yv &= \\tilde{\\Zv} \\Wv\\\\\n",
    "      \\Dv^w &= \\Tv - \\Yv\\\\\n",
    "      \\Dv^v &= \\Dv^w \\hat{\\Wv}^T \\cdot (1 - \\Zv^2)\\\\\n",
    "      \\Wv & \\leftarrow \\Wv + \\rho_o \\frac{1}{NK}\\tilde{\\Zv}^T \\Dv^w\\\\\n",
    "       \\Vv & \\leftarrow \\Vv + \\rho_h \\frac{1}{NK} \\tilde{\\Xv}^T \\Dv^v\\\\\n",
    "      \\end{align*}\n",
    "$$\n",
    "\n",
    "\n",
    "    # Given input X and target T, do forward pass to calculate network output, Y\n",
    "    ro = ro / (N * K)\n",
    "    rh = rh / (N * K)\n",
    "    X1 = addOnes(X)\n",
    "    Z = tanh(X1 @ V))\n",
    "    Z1 = addOnes(Z)\n",
    "    Y = Z1 @ W\n",
    "    # Do gradient descent on derivative of squared error with respect to each weight to update V and W.\n",
    "    Dw = T - Y\n",
    "    Dv = Dw @ W[1:, :].T * (1 - Z**2)\n",
    "    W = W + ro * Z1.T @ Dw\n",
    "    V = V + rh * X1.T @ Dv"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d05362ee",
   "metadata": {},
   "source": [
    "Let's change it a bit to work for more than 2 layers, numbered 0 through N.\n",
    "\n",
    "First, the forward pass:\n",
    "\n",
    "$$\n",
    "    \\begin{align*}\n",
    "      \\Zv^0 & = h(\\tilde{\\Xv} \\Wv^0)\\\\\n",
    "       \\text{for}  &\\; n =  1, \\ldots, N-1\\\\\n",
    "        & \\Zv^n = h(\\tilde{\\Zv}^{n-1} \\Wv^n)\\\\\n",
    "      \\Zv^N  & =  \\tilde{\\Zv}^{N-1} \\Wv^{N}\n",
    "    \\end{align*}\n",
    "$$\n",
    "\n",
    "Now, the backward pass:\n",
    "\n",
    "$$\n",
    "    \\begin{align*}\n",
    "    \\delta^N & =  - ( \\Tv - \\Zv^N )\\\\\n",
    "      \\text{for} &\\; n = N, \\ldots, 0\\\\\n",
    "      & \\nabla_{W^n} = (\\tilde{\\Zv}^{n-1})^T \\delta^n\\\\\n",
    "      &\\delta^{n-1} = \\delta^{n} (\\hat{\\Wv}^n)^T \\cdot (1 - (\\Zv^{n-1})^2)\\\\[3mm]\n",
    "      \\text{for} &\\; n = 0, \\ldots, N\\\\\n",
    "      & \\Wv^n = \\Wv^n - \\rho \\nabla_{W^n}\n",
    "      \\end{align*}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99012c2e",
   "metadata": {},
   "source": [
    "These equations are for $N-1$ hidden layers.  Given an input $X$, calculations proceed through all layers to produce the network output.  This structure will not do well for problems that require knowledge of past inputs.  What is an example of this kind of problem?\n",
    "\n",
    "We can handle this kind of problem in two ways.\n",
    "\n",
    "1. Append multiple past samples of $X$ with the current $X$, so the first layer can see past values.\n",
    "\n",
    "<img src='https://www.cs.colostate.edu/~anderson/cs545/notebooks/time-embedding.png' width='600'>\n",
    "\n",
    "2. Change the structure of the net to be a cascade of layers with a time-step delay in each layer's output.\n",
    "\n",
    "<img src='https://www.cs.colostate.edu/~anderson/cs545/notebooks/cascade-with-delays.png' width='600'>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec3b85c0",
   "metadata": {},
   "source": [
    "But, how many layers and past time steps of data should we use?  Depends on the problem.\n",
    "\n",
    "Is there a way we can let the network figure this out?\n",
    "\n",
    "YES!  If we require the first three layers to share the same weights and convert the delayed lines into feedback, or recurrent connections, we end up with a recurrent neural network!\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac28c904",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-15T17:09:51.472503Z",
     "start_time": "2022-11-15T17:09:51.464468Z"
    }
   },
   "source": [
    "<img src='https://www.cs.colostate.edu/~anderson/cs545/notebooks/recurrent.png' width='500'>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f67b875a",
   "metadata": {},
   "source": [
    "To define the forward and backward passes for this recurrent structure, we just have to change our notation for the weights, append $Z$ and $X$ as input to the recurrent layer, and sum of the gradients of the error with respect to the weights for each backward pass. We will assume the initial value of $Z$ is 0.\n",
    "\n",
    "First, the forward pass:\n",
    "\n",
    "$$\n",
    "    \\begin{align*}\n",
    "      \\Zv^0 & = h([\\tilde{\\Xv}, 0] \\Wv^0)\\\\\n",
    "       \\text{for}  &\\; n =  1, \\ldots, N-1\\\\\n",
    "        & \\Zv^n = h([\\tilde{\\Xv}, \\Zv^{n-1}] \\Wv^0)\\\\\n",
    "      \\Zv^N  & =  \\tilde{\\Zv}^{N-1} \\Wv^{1}\n",
    "    \\end{align*}\n",
    "$$\n",
    "\n",
    "Now, the backward pass:\n",
    "\n",
    "$$\n",
    "    \\begin{align*}\n",
    "    \\delta^N & =  - ( \\Tv - \\Zv^N )\\\\\n",
    "    \\nabla_{W^1} & = (\\tilde{\\Zv}^{N-1})^T \\delta^n\\\\\n",
    "    \\delta^{N-1} & = \\delta^{N} (\\Wv_z^1)^T \\cdot (1 - (\\Zv^{N-1})^2)\\\\  \n",
    "    \\nabla_{W^0} &= 0\\\\\n",
    "      \\text{for} \\; n & =  N-1, \\ldots, 0\\\\\n",
    "      & \\nabla_{W^0} = \\nabla_{W^0} + [\\tilde{\\Xv}, \\Zv^{n-1}]^T \\delta^n\\\\\n",
    "      &\\delta^{n-1} = \\delta^{n} (\\Wv_z^0)^T \\cdot (1 - (\\Zv^{n-1})^2)\\\\[3mm]\n",
    "      \\text{for} \\; n & = 0, \\ldots, N\\\\\n",
    "      & \\Wv^n = \\Wv^n - \\rho \\nabla_{W^n}\n",
    "      \\end{align*}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80bd4bc6",
   "metadata": {},
   "source": [
    "Phew!   Okay.   Now to code it.\n",
    "\n",
    "Let's just extend our classes from [neuralnetworksA4.py.txt](https://www.cs.colostate.edu/~anderson/cs545/notebooks/neuralnetworksA4.py.txt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "566da996",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-15T17:50:20.318403Z",
     "start_time": "2022-11-15T17:50:19.650188Z"
    }
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import neuralnetworksA4 as nn\n",
    "import sys\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "54af2809",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-15T17:50:21.530535Z",
     "start_time": "2022-11-15T17:50:21.519815Z"
    }
   },
   "outputs": [],
   "source": [
    "# X is (n_sequences, sequence_length, D)    Can be overlapping windows.\n",
    "# T is (n_sequences, sequence_length, K)    K is number of outputs\n",
    "\n",
    "class NeuralNetworkRNN(nn.NeuralNetwork):\n",
    "    \"\"\"One recurrent layer, followed by an output layer.\"\"\"\n",
    "\n",
    "    def __init__(self, n_inputs, n_hiddens, n_outputs):\n",
    "\n",
    "        if len(n_hiddens) != 1:\n",
    "            raise Exception('NeuralNetworkClassifierRNN: second argument must be list with one integer.')\n",
    "\n",
    "        # Change n_inputs to include n_hiddens for each recurrent connection\n",
    "        super().__init__(n_inputs + n_hiddens[0], n_hiddens, n_outputs)\n",
    "        self.n_hiddens = n_hiddens[0]\n",
    "\n",
    "    def _forward(self, X):\n",
    "        \"\"\"X.shape is (N, S, D), where N is number of samples, S is steps in sequence, D is dim of input.\"\"\"\n",
    "        \n",
    "        N, S, D = X.shape\n",
    "        H = self.n_hiddens\n",
    "\n",
    "        X1 = self._add_ones(X)\n",
    "        Z = np.zeros((N, S, H))\n",
    "        for s in range(S):\n",
    "            if s == 0:\n",
    "                Z[:, s, :] = np.tanh( X1[:, s, :] @ self.Ws[0][:D + 1, :] )\n",
    "            else:\n",
    "                Z[:, s, :] = np.tanh( np.hstack((X1[:, s, :], Z[:, s - 1, :]))  @ self.Ws[0])\n",
    "\n",
    "        Y = self._add_ones(Z) @ self.Ws[1]\n",
    "\n",
    "        self.Zs = [X, Z, Y]\n",
    "        return self.Zs\n",
    "       \n",
    "    def _error_f(self, X, T):\n",
    "        Zs = self._forward(X)\n",
    "        mean_sq_error = np.mean((T - Zs[-1][:, -1, :]) ** 2)\n",
    "        return mean_sq_error\n",
    "\n",
    "    def _gradient_f(self, X, T):\n",
    "\n",
    "        # Assumes _forward just called with layer outputs saved in self.Zs.\n",
    "        n_samples = X.shape[0]\n",
    "        n_outputs = T.shape[1]\n",
    "\n",
    "        # only calculate errors for Y at end of each sequence\n",
    "        Y = self.Zs[-1][:, -1, :]\n",
    "        delta = -(T - Y) / (n_samples * n_outputs)\n",
    "        self._backpropagate(delta)\n",
    "        return self.all_gradients\n",
    "\n",
    "    def _backpropagate(self, delta):\n",
    "        # delta is (N, S, K)\n",
    "        X1 = self._add_ones(self.Zs[0])\n",
    "        Z = self.Zs[1]\n",
    "        N, S, H = Z.shape\n",
    "       \n",
    "        self.Grads[1][:] = self._add_ones(Z[:, -1, :]).T @ delta\n",
    "        self.Grads[0][:] = 0\n",
    "        delta = delta @ self.Ws[1][1:, :].T * (1 - Z[:, -1, :] ** 2)\n",
    "\n",
    "        n_inputs_X = self.Zs[0].shape[2]\n",
    "        for s in range(S - 1, -1, -1):\n",
    "            self.Grads[0][:] += np.hstack((X1[:, s - 1, :], Z[:, s - 1, :])).T @ delta\n",
    "            delta = delta @ self.Ws[0][n_inputs_X + 1:, :].T * (1 - Z[:, s-1, :] ** 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08346c4c",
   "metadata": {},
   "source": [
    "To create our data sequences, here is a function to convert $X$ into three dimensional matrix, where second axis is the sequence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3dbc5afa",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-15T17:50:22.336078Z",
     "start_time": "2022-11-15T17:50:22.332196Z"
    }
   },
   "outputs": [],
   "source": [
    "def rolling_windows(X, window, n_shift=1):\n",
    "    '''X: multi-dimensional array, first (sample) dimension will be segmented into windows\n",
    "    window: number of samples per window\n",
    "    n_overlap: number of samples of overlap between consecutive windows\n",
    "\n",
    "    Returns:\n",
    "    array of windows'''\n",
    "\n",
    "    n_samples = X.shape[0]\n",
    "    n_windows = int((n_samples - window + 1) / n_shift)\n",
    "    # new_shape = X.shape[:-1] + (n_windows, window)\n",
    "    # strides = X.strides[:-1] + (X.strides[-1] * n_shift, X.strides[-1])\n",
    "    new_shape = (n_windows, window) + X.shape[1:]\n",
    "    new_strides = (X.strides[0] * n_shift, X.strides[0]) + X.strides[1:] \n",
    "    return np.lib.stride_tricks.as_strided(X, shape=new_shape, strides=new_strides)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8b0eb6f",
   "metadata": {},
   "source": [
    "Let's test it.  Say we want to convert a time series of data into overlapping windows of three."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4364bcdf",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-15T17:50:22.907674Z",
     "start_time": "2022-11-15T17:50:22.903107Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0],\n",
       "       [ 1],\n",
       "       [ 2],\n",
       "       [ 3],\n",
       "       [ 4],\n",
       "       [ 5],\n",
       "       [ 6],\n",
       "       [ 7],\n",
       "       [ 8],\n",
       "       [ 9],\n",
       "       [10],\n",
       "       [11],\n",
       "       [12],\n",
       "       [13],\n",
       "       [14]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = np.arange(15).reshape(-1, 1)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5e04e8bc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-15T17:50:23.211171Z",
     "start_time": "2022-11-15T17:50:23.207437Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(13, 3, 1)\n",
      "[[[ 0]\n",
      "  [ 1]\n",
      "  [ 2]]\n",
      "\n",
      " [[ 1]\n",
      "  [ 2]\n",
      "  [ 3]]\n",
      "\n",
      " [[ 2]\n",
      "  [ 3]\n",
      "  [ 4]]\n",
      "\n",
      " [[ 3]\n",
      "  [ 4]\n",
      "  [ 5]]\n",
      "\n",
      " [[ 4]\n",
      "  [ 5]\n",
      "  [ 6]]\n",
      "\n",
      " [[ 5]\n",
      "  [ 6]\n",
      "  [ 7]]\n",
      "\n",
      " [[ 6]\n",
      "  [ 7]\n",
      "  [ 8]]\n",
      "\n",
      " [[ 7]\n",
      "  [ 8]\n",
      "  [ 9]]\n",
      "\n",
      " [[ 8]\n",
      "  [ 9]\n",
      "  [10]]\n",
      "\n",
      " [[ 9]\n",
      "  [10]\n",
      "  [11]]\n",
      "\n",
      " [[10]\n",
      "  [11]\n",
      "  [12]]\n",
      "\n",
      " [[11]\n",
      "  [12]\n",
      "  [13]]\n",
      "\n",
      " [[12]\n",
      "  [13]\n",
      "  [14]]]\n"
     ]
    }
   ],
   "source": [
    "X = rolling_windows(X, 3, 1)\n",
    "print(X.shape)\n",
    "print(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57bb4e25",
   "metadata": {},
   "source": [
    "Now, let's say we want our target values to be the sum of the values in the sequence."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b1621da8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-15T17:50:24.203074Z",
     "start_time": "2022-11-15T17:50:24.198987Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3],\n",
       "       [ 6],\n",
       "       [ 9],\n",
       "       [12],\n",
       "       [15],\n",
       "       [18],\n",
       "       [21],\n",
       "       [24],\n",
       "       [27],\n",
       "       [30],\n",
       "       [33],\n",
       "       [36],\n",
       "       [39]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "T = X.sum(axis=1)\n",
    "T"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f02b532",
   "metadata": {},
   "source": [
    "Remember, $X$ has shape (13, 3, 1).  The last dimension is the number of inputs for each sample.  The 3 samples in each sequence will be fed in to the network one at a time, so the number of inputs is 1.\n",
    "\n",
    "The number of hiddens units must be a list with length 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6eee596f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-15T17:50:25.189356Z",
     "start_time": "2022-11-15T17:50:24.878939Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adam: Epoch 100 RMSE=0.06827\n",
      "Adam: Epoch 200 RMSE=0.01572\n",
      "Adam: Epoch 300 RMSE=0.00770\n",
      "Adam: Epoch 400 RMSE=0.00666\n",
      "Adam: Epoch 500 RMSE=0.00567\n",
      "Adam: Epoch 600 RMSE=0.00474\n",
      "Adam: Epoch 700 RMSE=0.00390\n",
      "Adam: Epoch 800 RMSE=0.00315\n",
      "Adam: Epoch 900 RMSE=0.00330\n",
      "Adam: Epoch 1000 RMSE=0.00204\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "NeuralNetworkRNN(11, [10], 1)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n_sequences, n_each_sequence, n_inputs = X.shape\n",
    "n_outputs = T.shape[1]\n",
    "\n",
    "nnet = NeuralNetworkRNN(n_inputs, [10], n_outputs)\n",
    "nnet.train(X, T, 1000, 'adam', 0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5058aed5",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-11-15T17:51:28.146102Z",
     "start_time": "2022-11-15T17:51:27.911407Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0]\n",
      " [1]\n",
      " [2]]\n",
      "3 3.0339703099560005\n",
      "[[1]\n",
      " [2]\n",
      " [3]]\n",
      "6 5.954628985432608\n",
      "[[2]\n",
      " [3]\n",
      " [4]]\n",
      "9 8.987673834246456\n",
      "[[3]\n",
      " [4]\n",
      " [5]]\n",
      "12 12.019609581819566\n",
      "[[4]\n",
      " [5]\n",
      " [6]]\n",
      "15 15.019323538284052\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Y = nnet.use(X)\n",
    "\n",
    "plt.figure(1)\n",
    "plt.clf()\n",
    "\n",
    "plt.subplot(3, 1, 1)\n",
    "plt.plot(nnet.get_performance_trace())\n",
    "\n",
    "plt.subplot(3, 1, 2)\n",
    "plt.plot(T, label='T')\n",
    "plt.plot(Y[:, -1, :], label='Y')\n",
    "plt.legend()\n",
    "\n",
    "plt.subplot(3, 1, 3)\n",
    "plt.plot(T, Y[:, -1, :], '.')\n",
    "plt.xlabel('Target')\n",
    "plt.ylabel('Y')\n",
    "\n",
    "\n",
    "for i in range(5):\n",
    "    print(X[i])\n",
    "    print(T[i, 0], Y[i, -1, 0])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
